#!/usr/bin/env ansible-playbook
# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# Default manifest for installing postgresql instances based on tagged role
---
- name: discovering shaw
  hosts: localhost
  tasks:
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": shaw
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: shaw_instances
      when:
        - cloud == 'aws'

    - name: building shaw host group
      add_host: hostname="{{ item }}" groupname=shaw ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-shaw-{{ domain }}-private-key.pem"
      with_items: "{{ shaw_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - shaw_instances.instances|length > 0

- name: fetching CA certs from shaw
  hosts: shaw
  gather_facts: yes
  tasks:
    - name: fetching kafka broker keystore
      fetch:
        src: "/etc/tls/datanexus/ca/{{ item }}"
        dest: "{{ key_path}}/{{ item }}"
        flat: yes
      with_items:
        - ca-cert.pem
        - ca-key.pem
      become: true
      
# do the auto discovery first as we use all the nodes for master/replica configuration
- name: discovering all postgresql nodes
  hosts: localhost
  vars_files:
      - vars/postgresql.yml
  tasks:
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": "{{ application }}"
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: postgresql_instances
      when:
        - cloud == 'aws'
      
    - name: building {{ application }} host group
      add_host: hostname="{{ item }}" groupname="{{ application }}" ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
      with_items: "{{ postgresql_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - cloud == 'aws'
        - postgresql_instances.instances|length > 0

- name: discovering all postgresql_master nodes
  hosts: localhost
  vars_files:
      - vars/postgresql.yml
  tasks:
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": "{{ application }}"
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
          "tag:Role": master
      register: postgresql_master_instances
      when:
        - cloud == 'aws'

    - name: building {{ application }}_master host group
      add_host: hostname="{{ item }}" groupname="{{ application }}_master" ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
      with_items: "{{ postgresql_master_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - cloud == 'aws'
        - postgresql_master_instances.instances|length > 0

- name: discovering all postgresql_replica nodes
  hosts: localhost
  vars_files:
      - vars/postgresql.yml
  tasks:    
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": "{{ application }}"
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
          "tag:Role": replica
      register: postgresql_replica_instances
      when:
        - cloud == 'aws'
      
    - name:  building {{ application }}_replica host group
      add_host: hostname="{{ item }}" groupname="{{ application }}_replica" ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
      with_items: "{{ postgresql_replica_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - cloud == 'aws'
        - postgresql_instances.instances|length > 0
      
- name: install base configuration for {{ application }}
  hosts: postgresql
  vars_files:
      - vars/postgresql.yml
      - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  roles:
    - { role: install-packages, package_list: ['https://download.postgresql.org/pub/repos/yum/{{ postgresql_major_version }}.{{ postgresql_minor_version }}/redhat/rhel-7-x86_64/pgdg-{{ ansible_distribution|lower }}{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_major_version }}.{{ postgresql_minor_version }}-3.noarch.rpm'] }
    - { role: install-packages, package_list: ['epel-release-7-9'], when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' }
    - { role: install-packages, package_list: "{{ postgresql_package_list }}" }
    - { role: postgresql }

- hosts: postgresql_master
  gather_facts: no
  vars_files:
    - vars/postgresql.yml
  roles:
    - { role: master-streaming }
    
- hosts: postgresql_replica
  gather_facts: no
  vars_files:
    - vars/postgresql.yml
  roles:
    - { role: replica-streaming }

### random leftover stuff


#     - name: list all instances
#       debug: msg=item
# #      with_items: "{{ postgresql_instances.instances|selectattr('state', 'equalto', 'running')|map(attribute='private_ip_address')|list }}"
#       with_items: "{{ postgresql_instances.instances|map(attribute='private_ip_address')|list }}"
#       when:
#         - postgresql_instances.instances|length > 0
 
    # - name: list master instances
    #   debug: msg=item
    #   with_items: "{{ postgresql_master_instances.instances|map(attribute='private_ip_address')|list }}"
    #   when:
    #     - postgresql_master_instances.instances|length > 0
    #
    # - name: list replica instances
    #   debug: msg=item
    #   with_items: "{{ postgresql_replica_instances.instances|map(attribute='private_ip_address')|list }}"
    #   when:
    #     - postgresql_replica_instances.instances|length > 0

  
# - name: creating openstack {{ application }} and {{ application }}-master host groups
#   hosts: localhost
#   vars_files:
#     - "{{ tenant_config_path }}/blueprints/{{ tenant }}/tenant/site.yml"
#     - "vars/{{ application }}.yml"
#     - vars/osp.yml
#   gather_facts: no
#   tasks:
#     - include_role:
#         name: build-app-host-groups
#       vars:
#         domain: production
#         host_group_list:
#           - { name: postgresql }
#           - { name: postgresql, role: master }
    
# - name: creating AWS {{ application }} and {{ application }}-replica host groups
#   hosts: localhost
#   vars_files:
#     - "{{ tenant_config_path }}/blueprints/{{ tenant }}/tenant/site.yml"
#     - "vars/{{ application }}.yml"
#     - vars/aws.yml
#   gather_facts: no
#   tasks:
#     - include_role:
#         name: build-app-host-groups
#       vars:
#         domain: development
#         host_group_list:
#           - { name: postgresql }
#           - { name: postgresql, role: master }
#           - { name: postgresql, role: replica }
#       when: inventory_type == 'dynamic'
#
# - name: do some debugging
#   hosts: localhost
#   gather_facts: no
#   tasks:
#     - debug: var=groups
#     - debug: msg="{{ inventory_hostname }}"
# #      with_items: groups
#     - debug: msg="hello"
#       when: "'postgresql_master' in groups and inventory_hostname in groups.postgresql_master"

# - hosts: "{{ application }}"
#   vars_files:
#     - vars/{{ application }}.yml
#     - vars/tenant.yml
#   tasks:
#     - name: configuring postgresql repo on all {{ application }} nodes
#       command: /usr/bin/yum -y reinstall https://download.postgresql.org/pub/repos/yum/{{ postgresql_major_version }}.{{ postgresql_minor_version }}/redhat/rhel-7-x86_64/pgdg-{{ ansible_distribution|lower }}{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_major_version }}.{{ postgresql_minor_version }}-3.noarch.rpm
#       become: yes
#
# - hosts: "{{ application }}"
#   vars_files:
#     - vars/{{ application }}.yml
#   gather_facts: yes
#   roles:
# #    - { role: common-roles/add-package-repo, package_name: "pgdg96", repo_name: "PostgreSQL 9.6", repo_url: "https://download.postgresql.org/pub/repos/yum/srpms/9.6/redhat/rhel-$releasever-$basearch", repo_key_url: "file:///etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG-96", when: proxy_env is defined }
# #    - { role: install-packages, package_list: ['epel-release-7-9', 'https://download.postgresql.org/pub/repos/yum/{{ postgresql_major_version }}.{{ postgresql_minor_version }}/redhat/rhel-7-x86_64/pgdg-centos{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_major_version }}.{{ postgresql_minor_version }}-3.noarch.rpm'] }
#     - { role: install-packages, package_list: ['epel-release-7-9'], when: ansible_distribution == 'CentOS' }
#     - { role: install-packages, package_list: "{{ postgresql_package_list }}" }
#     - { role: get-iface-addr, iface_name: "{{ postgresql_interface }}" }
#     - { role: dn-postgresql, postgresql_addr: "{{ iface_addr }}" }
#

#    - { role: common-roles/add-package-repo, package_name: "pgdg96", repo_name: "PostgreSQL 9.6", repo_url: "https://download.postgresql.org/pub/repos/yum/srpms/9.6/redhat/rhel-$releasever-$basearch", repo_key_url: "file:///etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG-96", when: proxy_env is defined }
#    - { role: install-packages, package_list: ['epel-release-7-9', 'https://download.postgresql.org/pub/repos/yum/{{ postgresql_major_version }}.{{ postgresql_minor_version }}/redhat/rhel-7-x86_64/pgdg-centos{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_major_version }}.{{ postgresql_minor_version }}-3.noarch.rpm'] }